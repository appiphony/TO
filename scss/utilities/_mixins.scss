// ==========================================================================
// Mixins (Utilities)
// ==========================================================================

// vendor prefix

@mixin vendor-prefix($name, $argument) {
  -webkit-#{$name}: #{$argument};
  -ms-#{$name}: #{$argument};
  -moz-#{$name}: #{$argument};
  -o-#{$name}: #{$argument};
  #{$name}: #{$argument};
}

@mixin translate3d($x, $y, $z) {
  -webkit-transform: translate3d($x, $y, $z);
  transform: translate3d($x, $y, $z);
}

// BEM selectors

@mixin e($element) {
  &__#{$element} {
    @content;
  }
}
@mixin m($modifier) {
  &--#{$modifier} {
    @content;
  }
}

// Media queries

@mixin mq($break) {
  @if $break == "small" {
    @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
      @content;
    }
  }
  @else if $break == "medium" {
    @media (min-width: $brkpoint-md + 1) {
      @content;
    }
  }
  @else if $break == "large" {
    @media (min-width: $brkpoint-lg) {
      @content;
    }
  }
  @else {
    @error "Whoops! No value could be retrieved for `#{$break}`. "
  }
}

// Generate modifier color classes

@mixin bg-colors($map) {
  @each $theme, $color in $map {
    &--#{$theme} {
      background-color: $color;
    }
  }
}

// Generating :before or :after pseudo-element shapes

@mixin p-el(
$el,
$el-w: null,
$el-h: null) {
  @if $el == "before" or $el == "after" {
    &:#{$el} {
    @extend %pseudos;
    width: $el-w;
    height: $el-h;
    @content;
  }
  }
  @else {
    @error "`#{$el}` is not a valid pseudo-element.";
  }
}

// Transitions

@mixin single-transition($attr...) {
  -webkit-transition: $attr $trns-duration ease;
  -moz-transition: $attr $trns-duration ease;
  -o-transition: $attr $trns-duration ease;
  transition: $attr $trns-duration ease;
}

@mixin transition-transform($transition...) {
  -webkit-transition: -webkit-transform $transition;
  -moz-transition: -moz-transform $transition;
  -o-transition: -o-transform $transition;
  transition: transform $transition;
}

// radius

@mixin radius($radius: $br-default, $important: null) {
  @include vendor-prefix($name: border-radius, $argument: $radius  #{$important});
}

@mixin erase-radius-right($radius: 0, $important: null) {
  @include vendor-prefix($name: border-top-right-radius, $argument: $radius  #{$important});
  @include vendor-prefix($name: border-bottom-right-radius, $argument: $radius  #{$important});
}

@mixin erase-radius-left($radius: 0, $important: null) {
  @include vendor-prefix($name: border-top-left-radius, $argument: $radius  #{$important});
  @include vendor-prefix($name: border-bottom-left-radius, $argument: $radius  #{$important});
}

@mixin erase-radius($radius: 0, $important: null) {
  @include vendor-prefix($name: border-radius, $argument: $radius  #{$important});
}

@mixin erase-radius-bottom($radius: 0, $important: null) {
  @include vendor-prefix($name: border-bottom-left-radius, $argument: $radius  #{$important});
  @include vendor-prefix($name: border-bottom-right-radius, $argument: $radius  #{$important});
}

@mixin erase-radius-top($radius: 0, $important: null) {
  @include vendor-prefix($name: border-top-left-radius, $argument: $radius  #{$important});
  @include vendor-prefix($name: border-top-right-radius, $argument: $radius  #{$important});
}

@mixin radius-left($radius: $br-default, $important: null) {
  @include vendor-prefix($name: border-top-left-radius, $argument: $radius  #{$important});
  @include vendor-prefix($name: border-bottom-left-radius, $argument: $radius  #{$important});
}

@mixin radius-right($radius: $br-default, $important: null) {
  @include vendor-prefix($name: border-top-right-radius, $argument: $radius  #{$important});
  @include vendor-prefix($name: border-bottom-right-radius, $argument: $radius  #{$important});
}

@mixin radius-top($radius: $br-default, $important: null) {
  @include vendor-prefix($name: border-top-left-radius, $argument: $radius  #{$important});
  @include vendor-prefix($name: border-top-right-radius, $argument: $radius  #{$important});
}

@mixin radius-bottom($radius: $br-default, $important: null) {
  @include vendor-prefix($name: border-bottom-left-radius, $argument: $radius #{$important});
  @include vendor-prefix($name: border-bottom-right-radius, $argument: $radius #{$important});
}

.top-cap {
  @include radius-top($important:!important);
  @include erase-radius-bottom($important:!important);
}

.bottom-cap {
  @include radius-bottom($important:!important);
  @include erase-radius-top($important:!important);
}


// buttons

@mixin button-size($padding-vertical: $base-v-padding, $padding-horizontal: $base-h-padding, $font-size: $base-font-size, $line-height: $base-line/$font-size, $border-radius: $br-default) {
  padding: ($padding-vertical + px) ($padding-horizontal + px);
  font-size: $font-size+px;
  line-height: $line-height;
  border-radius: $border-radius;
}

@mixin button-color ($background-color) {
  background-color: $background-color;
  border-color: darken($background-color, 10%);

}

@mixin button-type($type:null, $map: $ui-colors, $border-width: null) {
  @each $theme, $color in $map {
    @if $type == ghost {
      &--#{$theme} {
        &.button--#{$type} {
          color: $color;
          border-color: $color;
          background-color: transparent;
          border-width: $border-width + px;
          padding: ($base-v-padding - $border-width + px) ($base-h-padding - $border-width + px);
          &:hover,
          &:focus,
          &:active,
          &.active {
            background: $color;
            color: #fff;
          }
          &.button--small {
            @include button-size($padding-vertical: $base-v-padding/1.5, $padding-horizontal: $base-h-padding, $font-size: $base-font-size/1.25, $line-height: $base-line/$base-font-size, $border-radius: $br-default);
          }
        }
      }
    } @else if $type == chunky {
      &--#{$theme} {
        &.button--#{$type} {
          border-bottom-width: $border-width + px;
          border-color: darken($color, 10%);
          padding: ($base-v-padding - ($border-width / 2) + px) $base-h-padding + px;

          &:hover {
            border-color: darken($color, 15%);
          }
          &:focus,
          &:active,
          &.active {
            background-color: darken($color, 10%);
            border-bottom-width: 0;
            border-top-width: $border-width + px;
            border-color: darken($color, 15%);
          }
          &.button--split {
            border-left-color: darken($color, 10%);
          }
        }
      }
    }
  }
}

// spacing

@mixin spacing($attr:padding, $vertical: $base-v-padding, $horizontal: $base-h-padding, $unit: px) {
  #{$attr}: ($vertical+$unit) ($horizontal+$unit);
}

// border

@mixin border($w-top: 1px, $w-right: 1px, $w-bottom: 1px, $w-left: 1px, $width: $w-top $w-right $w-bottom $w-left, $style: solid, $color: $component-border-color) {
  border-width: $width;
  border-style: $style;
  border-color: $color;
}

//rotate

@mixin rotate($degree) {
  transform:rotate($degree+deg);
  -ms-transform:rotate($degree+deg); /* IE 9 */
  -webkit-transform:rotate($degree+deg); /* Opera, Chrome, and Safari */
}

// squares

@mixin square($number: $key-number*2.5) {
  width: $number+px;
  height: $number+px;
}

// surgical space

@mixin surgical-space($attr, $imp) {
  &n      {#{$attr}:0 #{$imp}}
  &xs     {#{$attr}:$key-number*.25+px #{$imp}}
  &s      {#{$attr}:$key-number*.5+px #{$imp}}
  &m      {#{$attr}:$key-number+px #{$imp}}
  &l      {#{$attr}:$key-number*1.5+px #{$imp}}
  &xl     {#{$attr}:$key-number*2+px #{$imp}}
  &xxl    {#{$attr}:$key-number*5+px #{$imp}}

  &tn      {#{$attr}-top: 0 #{$imp}}
  &txs     {#{$attr}-top:$key-number*.25+px #{$imp}}
  &ts      {#{$attr}-top:$key-number*.5+px #{$imp}}
  &tm      {#{$attr}-top:$key-number+px #{$imp}}
  &tl      {#{$attr}-top:$key-number*1.5+px #{$imp}}
  &txl     {#{$attr}-top:$key-number*2+px #{$imp}}
  &txxl    {#{$attr}-top:$key-number*5+px #{$imp}}

  &rn      {#{$attr}-right: 0 #{$imp}}
  &rxs     {#{$attr}-right:$key-number*.25+px #{$imp}}
  &rs      {#{$attr}-right:$key-number*.5+px #{$imp}}
  &rm      {#{$attr}-right:$key-number+px #{$imp}}
  &rl      {#{$attr}-right:$key-number*1.5+px #{$imp}}
  &rxl     {#{$attr}-right:$key-number*2+px #{$imp}}
  &rxxl    {#{$attr}-right:$key-number*5+px #{$imp}}

  &bn      {#{$attr}-bottom: 0 #{$imp}}
  &bxs     {#{$attr}-bottom:$key-number*.25+px #{$imp}}
  &bs      {#{$attr}-bottom:$key-number*.5+px #{$imp}}
  &bm      {#{$attr}-bottom:$key-number+px #{$imp}}
  &bl      {#{$attr}-bottom:$key-number*1.5+px #{$imp}}
  &bxl     {#{$attr}-bottom:$key-number*2+px #{$imp}}
  &bxxl    {#{$attr}-bottom:$key-number*5+px #{$imp}}

  &ln      {#{$attr}-left: 0 #{$imp}}
  &lxs     {#{$attr}-left:$key-number*.25+px #{$imp}}
  &ls      {#{$attr}-left:$key-number*.5+px #{$imp}}
  &lm      {#{$attr}-left:$key-number+px #{$imp}}
  &ll      {#{$attr}-left:$key-number*1.5+px #{$imp}}
  &lxl     {#{$attr}-left:$key-number*2+px #{$imp}}
  &lxxl    {#{$attr}-left:$key-number*5+px #{$imp}}
}


@mixin add-surgical-space($attr, $imp: null) {
  &--sm-- {
    @media (min-width: $brkpoint-sm) {
      @include surgical-space($attr: $attr, $imp: $imp);
    }
    &only-- {
      @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
        @include surgical-space($attr: $attr, $imp: $imp);
      }
    }
  }
  &--md-- {
    @media (min-width: $brkpoint-md) {
      @include surgical-space($attr: $attr, $imp: $imp);
    }
    &only-- {
      @media (min-width: $brkpoint-md) and (max-width: $brkpoint-lg) {
        @include surgical-space($attr: $attr, $imp: $imp);
      }
    }
  }
  &--lg-- {
    @media (min-width: $brkpoint-lg) {
      @include surgical-space($attr: $attr, $imp: $imp);
    }
  }
}

@mixin show-brkpoints($attr) {
  &.show-brkpoint--sm {
    @media (min-width: $brkpoint-sm) {
      display: #{$attr};
    }
    &--only {
      display: none;
      @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
        display: #{$attr};
      }
    }
  }
  &.show-brkpoint--md {
    @media (min-width: $brkpoint-sm) and (max-width: $brkpoint-md) {
      display: none;
    }
    @media (min-width: $brkpoint-md) {
      display: #{$attr};
    }
    &--only {
      display: none;
      @media (min-width: $brkpoint-md) and (max-width: $brkpoint-lg) {
        display: #{$attr};
      }
    }
  }
}